# ----------------------------------------------------------------------------------
#          ---        
#        / o o \    Snakemake workflow phylo-BEAST
#        V\ Y /V    Snakemake workflow to run beast2 analysis with genetic sequences 
#    (\   / - \     
#     )) /    |     
#     ((/__) ||     Code by Ceci VA 
# -----------------------------------------------------------------------------------


import urllib, json
import pandas as pd
from snakemake.utils import validate, min_version

min_version("7.11.0")


configfile: "config/config.yaml"
configfile: "config/datasets.yaml"

localrules: all, clean


# ANALYSIS = config["beast"]["run"]
wildcard_constraints:
    dataset="[A-Za-z0-9_]+"

# BEAST_SEED = range(1, (config["beast"].get("chains")) + 1)

all_files = []
ANALYSES = config["run"].keys()
for analysis in ANALYSES:
    DATASETS = config["run"][analysis]["dataset"]
    for dataset in DATASETS:
        if config["run"][analysis].get("iqtree") is not None:
            if  config["datasets"][dataset].get("replicates") is not None:
                all_files.append(expand("results/analysis/" + analysis + "/iqtree/" + dataset + ".{dseed}.png", dseed = range(0, config["datasets"][dataset].get("replicates"))))
            else:
                all_files.append("results/analysis/" + analysis + "/iqtree/" + dataset + ".png")
        
        if config["run"][analysis].get("beast") is not None:
            if  config["datasets"][dataset].get("replicates") is not None:
                all_files.append(expand("results/analysis/" + analysis + "/beast/" + dataset + ".{dseed}.log", dseed = range(0, config["datasets"][dataset].get("replicates"))))
            else:
                all_files.append("results/analysis/" + analysis + "/beast/" + dataset + ".log")


rule all:
    input:
        # expand(expand("results/analysis/{analysis}/iqtree/{dataset}.{{dseed}}.treefile", 
        #     dseed = config["dataset"]["{dataset}"]["replicates"]),
        #     analysis = config["run"].keys(),
        #     dataset = config["run"]["phylo"]["dataset"])
        all_files

rule clean:
    shell:
        '''
        rm -rf results logs
        '''

# Include workflow rules
include: "rules/common.smk"

include: "rules/sample_selection.smk"
# include: "rules/sequences_qc.smk" #TODO
include: "rules/sample_combine.smk" 
include: "rules/subsampling.smk" #TODO proportional subsampling

include: "rules/sequences_import.smk"

module lapis_import:
    # snakefile: github("cecivale/talking-to-lapis", path="python-snakemake/workflow/Snakefile", tag = "v0.1") 
    snakefile: "/Users/ceciliav/Tools/talking-to-LAPIS/python-snakemake/workflow/Snakefile"
    config: config

use rule load_metadata from lapis_import as lapis_select_samples

use rule load_sequences from lapis_import as lapis_import_sequences with: 
    input:
        ids = _get_sequence_ids
    output:
        alignment = "results/data/{dataset}/aligned{sufix,.*}.fasta"
    log:
        "logs/lapis_import_seqs_{dataset}_{sufix,.*}.txt" 

ruleorder: select_samples > lapis_select_samples 
ruleorder: select_sequences > lapis_import_sequences 

if config["preprocessing"]["align"]:
    include: "rules/alignment.smk"
    ruleorder: align > lapis_import_sequences 


if config["preprocessing"]["mask"]:
        include: "rules/mask.smk"

include: "rules/phylogenetics.smk"
# include: "rules/phylodynamics.smk"

# TODO change from shell directive to script so they are accessible from module definition
